# Generated by Django 5.1.7 on 2025-03-15 11:12

import django.core.validators
import django.db.models.deletion
import taggit.managers
import wagtail.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx'),
        ('wagtailcore', '0094_alter_page_locale'),
        ('wagtailimages', '0027_image_description'),
    ]

    operations = [
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the location', max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('media_content', wagtail.fields.StreamField([('audio', 1), ('video', 4), ('document', 6), ('text', 7)], blank=True, block_lookup={0: ('wagtailmedia.blocks.AudioChooserBlock', (), {'help_text': 'Select an audio file from media library', 'required': False}), 1: ('wagtail.blocks.StructBlock', [[('audio_file', 0)]], {}), 2: ('wagtailmedia.blocks.VideoChooserBlock', (), {'help_text': 'Select a video file from media library', 'required': False}), 3: ('wagtail.blocks.URLBlock', (), {'help_text': 'Or provide a URL to an external video', 'required': False}), 4: ('wagtail.blocks.StructBlock', [[('video_file', 2), ('video_url', 3)]], {}), 5: ('wagtail.documents.blocks.DocumentChooserBlock', (), {}), 6: ('wagtail.blocks.StructBlock', [[('document', 5)]], {}), 7: ('wagtail.blocks.RichTextBlock', (), {})}, verbose_name='Media Content')),
                ('date', models.DateField(blank=True, null=True, verbose_name='Publication Date')),
                ('hits', models.PositiveIntegerField(default=0)),
                ('is_featured', models.BooleanField(default=False, verbose_name='Muhim')),
                ('search_notes', wagtail.fields.RichTextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('cover_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image')),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
                ('location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='app.location')),
            ],
            options={
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='ArticlePage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('article', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='app.article')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='Khutbah',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('media_content', wagtail.fields.StreamField([('audio', 1), ('video', 4), ('document', 6), ('text', 7)], blank=True, block_lookup={0: ('wagtailmedia.blocks.AudioChooserBlock', (), {'help_text': 'Select an audio file from media library', 'required': False}), 1: ('wagtail.blocks.StructBlock', [[('audio_file', 0)]], {}), 2: ('wagtailmedia.blocks.VideoChooserBlock', (), {'help_text': 'Select a video file from media library', 'required': False}), 3: ('wagtail.blocks.URLBlock', (), {'help_text': 'Or provide a URL to an external video', 'required': False}), 4: ('wagtail.blocks.StructBlock', [[('video_file', 2), ('video_url', 3)]], {}), 5: ('wagtail.documents.blocks.DocumentChooserBlock', (), {}), 6: ('wagtail.blocks.StructBlock', [[('document', 5)]], {}), 7: ('wagtail.blocks.RichTextBlock', (), {})}, verbose_name='Media Content')),
                ('date', models.DateField(blank=True, null=True, verbose_name='Publication Date')),
                ('hits', models.PositiveIntegerField(default=0)),
                ('is_featured', models.BooleanField(default=False, verbose_name='Muhim')),
                ('search_notes', wagtail.fields.RichTextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('cover_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image')),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
                ('location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='app.location')),
            ],
            options={
                'verbose_name_plural': 'Khutab',
            },
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('media_content', wagtail.fields.StreamField([('audio', 1), ('video', 4), ('document', 6), ('text', 7)], blank=True, block_lookup={0: ('wagtailmedia.blocks.AudioChooserBlock', (), {'help_text': 'Select an audio file from media library', 'required': False}), 1: ('wagtail.blocks.StructBlock', [[('audio_file', 0)]], {}), 2: ('wagtailmedia.blocks.VideoChooserBlock', (), {'help_text': 'Select a video file from media library', 'required': False}), 3: ('wagtail.blocks.URLBlock', (), {'help_text': 'Or provide a URL to an external video', 'required': False}), 4: ('wagtail.blocks.StructBlock', [[('video_file', 2), ('video_url', 3)]], {}), 5: ('wagtail.documents.blocks.DocumentChooserBlock', (), {}), 6: ('wagtail.blocks.StructBlock', [[('document', 5)]], {}), 7: ('wagtail.blocks.RichTextBlock', (), {})}, verbose_name='Media Content')),
                ('date', models.DateField(blank=True, null=True, verbose_name='Publication Date')),
                ('hits', models.PositiveIntegerField(default=0)),
                ('is_featured', models.BooleanField(default=False, verbose_name='Muhim')),
                ('search_notes', wagtail.fields.RichTextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('publisher', models.CharField(blank=True, max_length=255, null=True)),
                ('edition', models.CharField(blank=True, help_text='e.g., First Edition, 2nd Edition', max_length=50, null=True)),
                ('publication_year', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('cover_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image')),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
                ('location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='app.location')),
            ],
            options={
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='Announcement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('media_content', wagtail.fields.StreamField([('audio', 1), ('video', 4), ('document', 6), ('text', 7)], blank=True, block_lookup={0: ('wagtailmedia.blocks.AudioChooserBlock', (), {'help_text': 'Select an audio file from media library', 'required': False}), 1: ('wagtail.blocks.StructBlock', [[('audio_file', 0)]], {}), 2: ('wagtailmedia.blocks.VideoChooserBlock', (), {'help_text': 'Select a video file from media library', 'required': False}), 3: ('wagtail.blocks.URLBlock', (), {'help_text': 'Or provide a URL to an external video', 'required': False}), 4: ('wagtail.blocks.StructBlock', [[('video_file', 2), ('video_url', 3)]], {}), 5: ('wagtail.documents.blocks.DocumentChooserBlock', (), {}), 6: ('wagtail.blocks.StructBlock', [[('document', 5)]], {}), 7: ('wagtail.blocks.RichTextBlock', (), {})}, verbose_name='Media Content')),
                ('date', models.DateField(blank=True, null=True, verbose_name='Publication Date')),
                ('hits', models.PositiveIntegerField(default=0)),
                ('is_featured', models.BooleanField(default=False, verbose_name='Muhim')),
                ('search_notes', wagtail.fields.RichTextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('start_date', models.DateField(blank=True, help_text='Date when this announcement becomes active', null=True, verbose_name='Start Date')),
                ('end_date', models.DateField(blank=True, help_text='Date when this announcement expires', null=True, verbose_name='End Date')),
                ('cover_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image')),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
                ('location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='app.location')),
            ],
            options={
                'ordering': ['-start_date', 'title'],
            },
        ),
        migrations.CreateModel(
            name='Mohadarah',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('media_content', wagtail.fields.StreamField([('audio', 1), ('video', 4), ('document', 6), ('text', 7)], blank=True, block_lookup={0: ('wagtailmedia.blocks.AudioChooserBlock', (), {'help_text': 'Select an audio file from media library', 'required': False}), 1: ('wagtail.blocks.StructBlock', [[('audio_file', 0)]], {}), 2: ('wagtailmedia.blocks.VideoChooserBlock', (), {'help_text': 'Select a video file from media library', 'required': False}), 3: ('wagtail.blocks.URLBlock', (), {'help_text': 'Or provide a URL to an external video', 'required': False}), 4: ('wagtail.blocks.StructBlock', [[('video_file', 2), ('video_url', 3)]], {}), 5: ('wagtail.documents.blocks.DocumentChooserBlock', (), {}), 6: ('wagtail.blocks.StructBlock', [[('document', 5)]], {}), 7: ('wagtail.blocks.RichTextBlock', (), {})}, verbose_name='Media Content')),
                ('date', models.DateField(blank=True, null=True, verbose_name='Publication Date')),
                ('hits', models.PositiveIntegerField(default=0)),
                ('is_featured', models.BooleanField(default=False, verbose_name='Muhim')),
                ('search_notes', wagtail.fields.RichTextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('cover_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image')),
                ('location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='app.location')),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'verbose_name_plural': 'Mohadarat',
            },
        ),
        migrations.CreateModel(
            name='Motarjmah',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('media_content', wagtail.fields.StreamField([('audio', 1), ('video', 4), ('document', 6), ('text', 7)], blank=True, block_lookup={0: ('wagtailmedia.blocks.AudioChooserBlock', (), {'help_text': 'Select an audio file from media library', 'required': False}), 1: ('wagtail.blocks.StructBlock', [[('audio_file', 0)]], {}), 2: ('wagtailmedia.blocks.VideoChooserBlock', (), {'help_text': 'Select a video file from media library', 'required': False}), 3: ('wagtail.blocks.URLBlock', (), {'help_text': 'Or provide a URL to an external video', 'required': False}), 4: ('wagtail.blocks.StructBlock', [[('video_file', 2), ('video_url', 3)]], {}), 5: ('wagtail.documents.blocks.DocumentChooserBlock', (), {}), 6: ('wagtail.blocks.StructBlock', [[('document', 5)]], {}), 7: ('wagtail.blocks.RichTextBlock', (), {})}, verbose_name='Media Content')),
                ('date', models.DateField(blank=True, null=True, verbose_name='Publication Date')),
                ('hits', models.PositiveIntegerField(default=0)),
                ('is_featured', models.BooleanField(default=False, verbose_name='Muhim')),
                ('search_notes', wagtail.fields.RichTextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('translator', models.CharField(blank=True, max_length=255, null=True)),
                ('cover_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image')),
                ('location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='app.location')),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'verbose_name_plural': 'Motarjmaat',
            },
        ),
        migrations.CreateModel(
            name='Sharhu',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('media_content', wagtail.fields.StreamField([('audio', 1), ('video', 4), ('document', 6), ('text', 7)], blank=True, block_lookup={0: ('wagtailmedia.blocks.AudioChooserBlock', (), {'help_text': 'Select an audio file from media library', 'required': False}), 1: ('wagtail.blocks.StructBlock', [[('audio_file', 0)]], {}), 2: ('wagtailmedia.blocks.VideoChooserBlock', (), {'help_text': 'Select a video file from media library', 'required': False}), 3: ('wagtail.blocks.URLBlock', (), {'help_text': 'Or provide a URL to an external video', 'required': False}), 4: ('wagtail.blocks.StructBlock', [[('video_file', 2), ('video_url', 3)]], {}), 5: ('wagtail.documents.blocks.DocumentChooserBlock', (), {}), 6: ('wagtail.blocks.StructBlock', [[('document', 5)]], {}), 7: ('wagtail.blocks.RichTextBlock', (), {})}, verbose_name='Media Content')),
                ('date', models.DateField(blank=True, null=True, verbose_name='Publication Date')),
                ('hits', models.PositiveIntegerField(default=0)),
                ('is_featured', models.BooleanField(default=False, verbose_name='Muhim')),
                ('search_notes', wagtail.fields.RichTextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('cover_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image')),
                ('location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='app.location')),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'verbose_name_plural': 'Shroohat',
            },
        ),
        migrations.CreateModel(
            name='SocialMedia',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the social media platform', max_length=100)),
                ('url', models.URLField(validators=[django.core.validators.URLValidator()])),
                ('icon_class', models.CharField(blank=True, help_text="CSS class for icon (e.g., 'fa fa-twitter' for FontAwesome)", max_length=100)),
                ('icon_image', models.ForeignKey(blank=True, help_text='Upload an icon image', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Tilawah',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('media_content', wagtail.fields.StreamField([('audio', 1), ('video', 4), ('document', 6), ('text', 7)], blank=True, block_lookup={0: ('wagtailmedia.blocks.AudioChooserBlock', (), {'help_text': 'Select an audio file from media library', 'required': False}), 1: ('wagtail.blocks.StructBlock', [[('audio_file', 0)]], {}), 2: ('wagtailmedia.blocks.VideoChooserBlock', (), {'help_text': 'Select a video file from media library', 'required': False}), 3: ('wagtail.blocks.URLBlock', (), {'help_text': 'Or provide a URL to an external video', 'required': False}), 4: ('wagtail.blocks.StructBlock', [[('video_file', 2), ('video_url', 3)]], {}), 5: ('wagtail.documents.blocks.DocumentChooserBlock', (), {}), 6: ('wagtail.blocks.StructBlock', [[('document', 5)]], {}), 7: ('wagtail.blocks.RichTextBlock', (), {})}, verbose_name='Media Content')),
                ('date', models.DateField(blank=True, null=True, verbose_name='Publication Date')),
                ('hits', models.PositiveIntegerField(default=0)),
                ('is_featured', models.BooleanField(default=False, verbose_name='Muhim')),
                ('search_notes', wagtail.fields.RichTextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('cover_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image')),
                ('location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='app.location')),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'verbose_name_plural': 'Tilawaat',
            },
        ),
    ]
